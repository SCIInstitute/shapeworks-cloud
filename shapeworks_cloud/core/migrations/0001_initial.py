# Generated by Django 3.2 on 2021-05-05 14:58

from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import s3_file_field.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = []  # type: ignore

    operations = [
        migrations.CreateModel(
            name='GroomedDataset',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'created',
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name='created'
                    ),
                ),
                (
                    'modified',
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name='modified'
                    ),
                ),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Optimization',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'created',
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name='created'
                    ),
                ),
                (
                    'modified',
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name='modified'
                    ),
                ),
                ('shapeworks_version', models.CharField(default='6.0.0', max_length=255)),
                ('running', models.BooleanField(default=False)),
                ('error', models.BooleanField(default=False)),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ShapeModel',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'created',
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name='created'
                    ),
                ),
                (
                    'modified',
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name='modified'
                    ),
                ),
                ('local', s3_file_field.fields.S3FileField()),
                ('world', s3_file_field.fields.S3FileField()),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OptimizationParameters',
            fields=[
                (
                    'optimization',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='parameters',
                        serialize=False,
                        to='core.optimization',
                    ),
                ),
                ('number_of_particles', models.IntegerField(default=128)),
                ('use_normals', models.BooleanField(default=False)),
                ('normal_weight', models.FloatField(default=10.0)),
                ('checkpointing_interval', models.IntegerField(default=1000)),
                ('iterations_per_split', models.IntegerField(default=1000)),
                ('optimization_iterations', models.IntegerField(default=1000)),
                ('starting_regularization', models.FloatField(default=10.0)),
                ('ending_regularization', models.FloatField(default=1.0)),
                ('recompute_regularization_interval', models.IntegerField(default=1)),
                ('domains_per_shape', models.IntegerField(default=1)),
                (
                    'domain_type',
                    models.CharField(
                        choices=[('image', 'Image'), ('mesh', 'Mesh')],
                        default='image',
                        max_length=16,
                    ),
                ),
                ('relative_weighting', models.FloatField(default=1.0)),
                ('initial_relative_weighting', models.FloatField(default=1.0)),
                ('procrustes_interval', models.IntegerField(default=0)),
                ('procrustes_scaling', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'created',
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name='created'
                    ),
                ),
                (
                    'modified',
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name='modified'
                    ),
                ),
                ('name', models.CharField(max_length=255)),
                (
                    'groomed_dataset',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='+',
                        to='core.groomeddataset',
                    ),
                ),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OptimizationCheckpoint',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('blob', s3_file_field.fields.S3FileField()),
                ('split', models.IntegerField()),
                ('iteration', models.IntegerField()),
                ('number_of_particles', models.IntegerField()),
                (
                    'optimization',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='checkpoints',
                        to='core.optimization',
                    ),
                ),
                (
                    'shape_model',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='core.shapemodel'
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name='optimization',
            name='project',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='optimizations',
                to='core.project',
            ),
        ),
        migrations.AddField(
            model_name='optimization',
            name='shape_model',
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, to='core.shapemodel'
            ),
        ),
        migrations.CreateModel(
            name='GroomedSegmentation',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'created',
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name='created'
                    ),
                ),
                (
                    'modified',
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name='modified'
                    ),
                ),
                ('name', models.CharField(max_length=255)),
                ('blob', s3_file_field.fields.S3FileField()),
                ('mesh', s3_file_field.fields.S3FileField(null=True)),
                ('index', models.IntegerField()),
                (
                    'dataset',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='segmentations',
                        to='core.groomeddataset',
                    ),
                ),
            ],
            options={
                'ordering': ['dataset', 'index'],
            },
        ),
        migrations.AddConstraint(
            model_name='optimizationcheckpoint',
            constraint=models.UniqueConstraint(
                fields=('optimization', 'iteration'), name='unq_optimization_iteration'
            ),
        ),
        migrations.AddConstraint(
            model_name='groomedsegmentation',
            constraint=models.CheckConstraint(check=models.Q(index__gte=0), name='chk_index_gte_0'),
        ),
        migrations.AddConstraint(
            model_name='groomedsegmentation',
            constraint=models.UniqueConstraint(
                fields=('dataset', 'index'), name='unq_dataset_index'
            ),
        ),
        migrations.AddConstraint(
            model_name='groomedsegmentation',
            constraint=models.UniqueConstraint(fields=('dataset', 'name'), name='unq_dataset_name'),
        ),
    ]
